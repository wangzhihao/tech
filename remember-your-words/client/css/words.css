[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
  display: none !important;
}
/*
For the bootstrap's fixed navbar.
See http://stackoverflow.com/questions/11124777/twitter-bootstrap-navbar-fixed-top-overlapping-site
*/
body {
  padding-top: 70px;
}

a{
  cursor: pointer;
}

img{
    max-height: 179px;
}

.words-example{
  margin: 5px 0;
}

.words-list .item {
	position: relative;
  margin: 30px 0;
}

.words-list .item .operations{
  position: absolute;
  top: 10px;
  right: 0;
  font-size: 20px;
}

.words-list .item .operations .edit,
.words-list .item .operations .search-on-google,
.words-list .item .operations .delete{
  margin-right: 20px;
}

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition:0.5s linear all;
  -moz-transition:0.5s linear all;
  -o-transition:0.5s linear all;
  transition:0.5s linear all;
  opacity:0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
  opacity:1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
  -webkit-animation:0.5s my_animation;
  -moz-animation:0.5s my_animation;
  -o-animation:0.5s my_animation;
  animation:0.5s my_animation;
}

@keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

/*
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-moz-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-o-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

.black{
	color: #777;
}

/*
The following css makes the card able to flip. The flip consists of three steps:
 1. rotate 90 degree first.
 2. swap the poisition of front side and back side
 3. rotate 90 degree in the end.
*/

/* entire container, keeps perspective */
.flip-container {
  cursor: ew-resize;
  perspective: 2000px;
}
  /* flip 90 degree at total if either .flip1 or .flip2 presents. */
  .flip-container.flip1 .flipper,
  .flip-container.flip2 .flipper{
    transform: rotateY(90deg);
  }

  /* flip 180 degree at total if both .flip1 and .flip2 presents. */
  .flip-container.flip1.flip2 .flipper{
    transform: rotateY(180deg);
  }
  
/* make two sides have the same width.*/
.flip-container, .front, .back {
  width: 100%;
}

/* flip speed goes here */
.flipper {
  transition: .3s;
  transform-style: preserve-3d;
  position: relative;
}

/* hide back of pane during swap */
.front, .back{
  backface-visibility: hidden;
}

.front{
  position: static;
}

/* align up the front and back*/
.back{
  position: absolute;
  top: 0;
  left: 0;
}

/* front pane, placed above back */
.front {
  z-index: 2;
  /* for firefox 31 */
  transform: rotateY(0deg);
}

/* back, initially hidden pane */
.back {
  transform: rotateY(180deg);
}

.clear {
    clear: both;
}
